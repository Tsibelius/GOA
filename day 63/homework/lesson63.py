# დავალება 1-ლი - Return a String from a Function

# ფუნქცია უნდა დააბრუნოს შეტყობინება, რომელიც შეიცავს სახელს

def greet(name):
    # შენახულ ვარიაბლში ვიგდებთ სტრინგს, რომელიც სახელს შეიცავს
    message = "Hello, " + name + " how are you doing today?"
    # ვაბრუნებთ შეტყობინებას
    return message

# -----------------------------------------------------------------------------

# დავალება 2-ლი - Keep Hydrated!

# ნეითანი სვამს 0.5 ლიტრს წყალს ყოველ საათში.
# უნდა დავბრუნოთ რამდენი ლიტრი წყალი დალევს დროის მიხედვით

def litres(time):
    # დრო(hour) გამოლაპარაკებულია 2-ს, რადგან ნეითანი სვამს 0.5 ლიტრს საათში
    # ვდივთ რამდენი ლიტრი წყალი დაილია
    result = time // 2
    # ვაბრუნებთ საბოლოო პასუხს
    return result

# -----------------------------------------------------------------------------

# დავალება 3-ლი - How good are you really?
# შევამოწმოთ, არის თუ არა თქვენი ქულა კლასის საშუალო ქულაზე უკეთესი

def better_than_average(class_points, your_points):
    # კლასის ქულების საერთო თანხა გამოვთვალოთ და გავყოფთ კლასის რაოდენობაზე
    average = sum(class_points) / len(class_points)
    # ვამოწმებთ, არის თუ არა თქვენი ქულა მეტი კლასის საშუალო ქულაზე
    return your_points > average

# -----------------------------------------------------------------------------

# დავალება 4-ლი - Invert values
# ვმუშაობთ რიცხვების სიაზე და ვაბრუნებთ მის ინვერსიას

def invert(lst):
    # ვბრუნებთ სიას, სადაც თითოეული ელემენტი შეიცვლება საპირისპიროდ
    return [-x for x in lst]

# -----------------------------------------------------------------------------

# დავალება 5-ლი - Find Maximum and Minimum Values of a List

# პირველი ფუნქცია მოძებნის მინიმალურ მნიშვნელობას, ხოლო მეორე - მაქსიმალურს

def minimum(arr):
    # დავიწყებთ პირველი ელემენტით
    min_val = arr[0]
    # ვიტოვებთ ყველაზე მცირე მნიშვნელობას სიაში
    for num in arr:
        if num < min_val:
            min_val = num
    # ვაბრუნებთ მინიმალურ მნიშვნელობას
    return min_val

def maximum(arr):
    # დავიწყებთ პირველი ელემენტით
    max_val = arr[0]
    # ვიტოვებთ ყველაზე დიდ მნიშვნელობას სიაში
    for num in arr:
        if num > max_val:
            max_val = num
    # ვაბრუნებთ მაქსიმალურ მნიშვნელობას
    return max_val

# -----------------------------------------------------------------------------

# დავალება 6-ლი - Filtering Even Numbers (Bug Fixes)

# ამოცანა: ვ filtracion ვუზიაროთ სიას, რათა დავუბრუნოთ მხოლოდ ზუსტი ჯორები

def even_numbers(array):
    # სია, რომელშიც მხოლოდ თუნდაც რიცხვები იქნება
    result = []
    # გასავლელი სიის თითოეულ ელემენტზე მორგება
    index = 0
    while index < len(array):
        number = array[index]
        # როცა ნომერი არის შერეული (მთელ რიცხვი)
        if number % 2 == 0:
            result.append(number)
        # ზრდა ინდექსის
        index = index + 1
    # ვაბრუნებთ სიას
    return result

# -----------------------------------------------------------------------------

# დავალება 7-ლი - Who Ate the Cookie?

# ამოცანა: გვითხარით, ვინ დაჭამა სასუსნავი

def who_ate_the_cookie(x):
    # თუ ტიპი არის სტრიქონი
    if type(x) == str:
        eater = "Zach"
    # თუ ტიპი არის რიცხვი
    elif type(x) == int or type(x) == float:
        eater = "Monica"
    # სხვა შემთხვევაში იქნება ძაღლი
    else:
        eater = "the dog"
    # ვაბრუნებთ პასუხს
    return f"Who ate the cookie? It was {eater}!"

# -----------------------------------------------------------------------------

# დავალება 8-ლი - Square(n) Sum

# ამოცანა: დაანგარიშეთ ნატურალური რიცხვების კვადრატების ჯამი

def square_sum(numbers):
    # გადავიყვანთ ცვლადში ჯამი
    total = 0
    # ვმუშაობთ სიაზე
    index = 0
    while index < len(numbers):
        number = numbers[index]
        # ვანგარიშებთ კვადრატს
        square = number * number
        # ვამატებთ ჯამში
        total = total + square
        # ვზრდით ინდექსის
        index = index + 1
    # ვაბრუნებთ შედეგი
    return total

# -----------------------------------------------------------------------------

# დავალება 9-ლი - String Cleaning

# ამოცანა: დავბრუნოთ სტრინგი, სადაც მხოლოდ ასოები დარჩება, რიცხვები უნდა დაიშალოს

def string_clean(s):
    # ვტოვებთ მხოლოდ ასოებს
    result = ''
    # თითოეული სიმბოლოს მორგება
    index = 0
    while index < len(s):
        char = s[index]
        # თუ ეს არ არის რიცხვი, ვამატებთ სიაში
        if not (char.isdigit()): # ვერ მივხვდი და იუტუბი მოვიხმარიე
            result = result + char
        # ზრდა ინდექსის
        index = index + 1
    # ვაბრუნებთ შევსებულ სტრინგს
    return result

# -----------------------------------------------------------------------------

# დავალება 10-ლი - Counting Characters

# ამოცანა: დავანგარიშოთ, რამდენჯერ იმეორებს თითოეული სიმბოლო

def count_characters(s):
    # შევქმნათ ცარიელი ...
    result = {}
    # გადავდივართ თითოეულ სიმბოლოზე
    index = 0
    while index < len(s):
        char = s[index]
        # თუ სიმბოლო უკვე არსებობს, ამატებს ერთეულს
        if char in result:
            result[char] = result[char] + 1
        else:
            result[char] = 1
        # ზრდა ინდექსის
        index = index + 1
    # ვაბრუნებთ 
    return result